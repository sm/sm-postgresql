#!/usr/bin/env bash

#
# pgha - PostgreSQL High Availability Monitor
#
# NOTES:
# - ${PGDATA}/pgha/master file with master IP address 
#   must be put in place by the provisioner
# - This script runs under the postgresql user as a minutely cronjob:
#
#    * * * * * PGDATA=/var/db/postgresql/9.3/data /opt/sm/bin/sm pgha run
#
# - To run manually in debug mode as user postgres:
# 
#   DEBUG=1 PGDATA=/var/db/postgresql/9.3/data sm pgha run
#
# TODO: 
# - vmotion master comes back online safely.
# - multiple failures including both master and sync.
#
# Questions:
#  - Should we save the original master_ip when sync is promoted?  Not unless we want to report back 
#    to some central authority that the server pool lost a server
#
# Keep track of where we go next.
#

require_postgres_user

require_master_ip

(( ${DEBUG:=0} == 0 )) || set -x

exec &> ${pghaLog}
echo "${timestamp}"

#If the server from the last run is still in the process of replicating, abort this process
if replicationIsStarting
then exit 0
fi

if isResponsive ${master_ip}
then loadIPs
fi

setMyRole

case ${myRole} in
  (master)
    saveIPs # TODO: Replace this with etcd.
    if isResponsive ${master_ip}
    then saveToEtcd
    fi
    ;;
  (sync)
    if ! isResponsive ${master_ip}
    then promoteToMaster
    fi
    saveIPs # TODO: Replace this with etcd.
    ;;
  (replica)
    if isResponsive ${master_ip}
    then 
      saveIPs
    elif [[ -n ${sync_ip} ]] && isResponsive ${sync_ip}
    then 
      master_ip=${sync_ip}
      if replicateFromMaster
      then
        loadIPs
        saveIPs # TODO: Replace this with etcd.
      fi
    else # master and sync replica are offline...
      if (( ${#replica_ips} == 1 ))
      then # I am a replica and no other replicas exist.
        promoteToMaster
      elif  (( ${#replica_ips} > 1 ))
      then
        firstReplica=${replica_ips[1]}
        if isResponsive ${firstReplica}
        then
          master_ip=${firstReplica}
          if replicateFromMaster
          then
            loadIPs
            saveIPs # TODO: Replace this with etcd.
          fi
        fi
      fi
    fi
    ;;
  (new)
    if isResponsive ${master_ip}
    then
      if replicateFromMaster
      then
        loadIPs
        saveIPs # TODO: Replace this with etcd.
      fi
    elif [[ -n "${sync_ip}" ]] && isResponsive ${sync_ip}
    then
      master_ip=${sync_ip}
      if replicateFromMaster
      then
        loadIPs
        saveIPs # TODO: Replace this with etcd.
      fi
    fi
    ;;
esac

exit $? # Let cron kickoff in one minute instead of sleeping
