#!/bin/sh

postgresql_cli()
{
  trace_filter postgresql || set +o xtrace

  typeset -a newargs
  typeset token
  user="postgres"
  port=5432
  ssh_port=22
  ssh_identity="$HOME/.ssh/id_replication"

  while (( ${#extension_args} ))
  do
    array shift extension_args into token
    case "${token}" in
      (master)
        array shift extension_args into master
        if variable is empty master
        then log error "The master host/IP identification string must follow keyword 'master'" ; fi
        ;;
      (replica)
        array shift extension_args into replica
        if variable is empty replica
        then log error "The replica host/IP identification string must follow keyword 'replica'" ; fi
        ;;
      (port)
        array shift extension_args into port
        if variable is empty port
        then log error "The system port name of PostgreSQL on the master server must be specified after keyword 'port'" ; fi
        ;;
      (ssh_port)
        array shift extension_args into ssh_port
        if variable is empty ssh_port
        then log error "The system ssh_port name of PostgreSQL on the master server must be specified after keyword 'ssh_port'" ; fi
        ;;
      (ssh_identity)
        array shift extension_args into ssh_identity
        if variable is empty ssh_identity
        then log error "The system ssh_identity name of PostgreSQL on the master server must be specified after keyword 'ssh_identity'" ; fi
        ;;
      (password)
        array shift extension_args into password
        if variable is empty password
        then log error "The system password name of PostgreSQL on the master server must be specified after keyword 'password'" ; fi
        ;;
      (user)
        array shift extension_args into user
        if variable is empty user
        then log error "The system user name of PostgreSQL on the master server must be specified after keyword 'user'" ; fi
        ;;
      (*)
        if variable is nonempty token
        then
          newargs+=("${token}")
        fi
        ;;
    esac
  done

  extension_args=("${newargs[@]}")

  ssh_options="-i ${ssh_identity} -oPort=${ssh_port} -o StrictHostKeyChecking=no "
}

postgresql_defaults()
{
  trace_filter postgresql || set +o xtrace
  if user is root
  then
    if os is darwin
    then
      service_user="_postgres"
    else
      service_user="postgres"
    fi
  else
    service_user="$USER"
  fi

  if [[ ${service_user} == "postgresql" ]]
  then service_user="postgres"
  fi

  config read file "defaults" key "version" prefix "package" from "postgresql"

  major_minor_version=$(echo ${package_version} | sed 's/\.[0-9]*$//' )

  service_data_path="/var/db/postgresql/${major_minor_version}/data"

  if [[ -z "${json_uri}" ]] 
	then
		case ${package_version} in 
			(9.3.*)
				json_uri="${extension_path}/config/defaults-9.3.json"
				;;
			(9.2.*|9.1.*|9.0.*)
				json_uri="${extension_path}/config/defaults-9.json"
				;;
			(*)
				log error "Unhandled PostgreSQL version for defaults json: ${package_version}"
				;;
		esac
	fi

	json get from ${json_uri} \
		into "postgresql_defaults" \
		string "postgresql/version" default "${package_version}" as "version" \
		string "postgresql/bind" default 0.0.0.0 as "bind" \
		string "postgresql/port" default 5432 as "port" \
		string "postgresql/syslog/facility" default "local0" as "syslog_facility"\
		string "postgresql/max/clients" default 80 as "max_clients" \
    string "postgresql/max/memory" default "128MB" as "max_memory" \
    string "postgresql/max/slow" default 1024 as "max_slow" \
    string "postgresql/log/slow" default 10000 as "log_slow" \
    string "postgresql/service/bin_path" as "service_bin_path" default "${sm_path}/pkg/versions/postgresql/${package_version}/bin" \
    string "postgresql/service/pid_file" as "service_pid_file" default "${service_data_path}/postmaster.pid" \
    string "postgresql/service/config_file" as "service_config_file" default "/etc/postgresql/postgresql.conf" \
    string "postgresql/service/log_file" as "service_log_file" default "/var/log/postgresql/postgresql.log" \
    string "postgresql/service/user" as "service_user" default "${service_user}" \
    string "postgresql/service/data_path" as "service_data_path" default "${service_data_path}" \
    string "postgresql/start/timeout" as "start_timeout" default "300" \
    string "postgresql/replication/master" as "master" default "${master:-localhost}" \
    string "postgresql/replication/replica" as "replica" default "" \
    string "postgresql/wal/level" as "wal_level" default "hot_standby" \
    string "postgresql/wal/buffers" as "wal_buffers" default "16MB" \
    string "postgresql/wal/writer_delay" as "wal_writer_delay" default "200ms" \
    string "postgresql/wal/max_senders" as "wal_max_senders" default "5" \
    string "postgresql/wal/keep_segments" as "wal_keep_segments" default "20" \
    string "postgresql/checkpoint/segments" as "checkpoint_segments" default "50" \
    string "postgresql/effective_cache_size" as "effective_cache_size" default "512MB" \
    string "postgresql/shared_buffers" as "shared_buffers" default "128MB" \
    string "postgresql/unix_socket_directory" as "unix_socket_directory" default "/tmp" \
    string "postgresql/maintenance_work_mem" as "maintenance_work_mem" default "64MB" \
    string "postgresql/work_mem" as "work_mem" default "2MB" \
    string "postgresql/archive_mode" as "archive_mode" default "off" \
    string "postgresql/archive_command" as "archive_command" default "" \
    string "postgresql/archive_timeout" as "archive_timeout" default "0" \
    string "postgresql/hot_standby" as "hot_standby" default "off" \
    string "postgresql/fsync" as "fsync" default "on" \
    string "postgresql/synchronous_commit" as "synchronous_commit" default "on" \
    string "postgresql/temp_buffers" as "temp_buffers" default "8MB"

  PGDATA="${service_data_path}"
}

postgresql_initialize()
{
  trace_filter postgresql || set +o xtrace

  local _action

  postgresql_defaults

  service initialize

  config read file defaults from postgresql version key version prefix package

  service_binary="${service_bin_path}/pg_ctl"
  service_cli_binary="${service_bin_path}/psql"
  package_user="${service_user}"

  if array is empty service_flags
  then
    _action="${action//\(*}"
    service_flags+=(${_action//*_} -D "$service_data_path" -s )
    service_stop_flags+=( -m fast -w )
  fi
  # No longer necessary...
  # ssh-keygen -t rsa -b 2048 -f $HOME/.ssh/id_replication -N '' -C "$HOSTNAME key"
}

postgresql_prefetch()
{
  trace_filter postgresql || set +o xtrace
  package define \
    base_url "ftp://ftp.postgresql.org/pub/source/v${package_version}"
}

postgresql_database_initialize()
{
  trace_filter postgresql || set +o xtrace
  local _file _command _initdb_flags file _entries _dir

  if path exists "${service_data_path}/base"
  then
    log warn "The database in '${service_data_path}' has already been initialized."
  else
    log "Initializing postgresql data directory in $service_data_path"

    _initdb_flags+=(
    --pgdata="'${service_data_path}'"
    --encoding=utf8
    --locale=C
    --username=$service_user
    )

    path create "${service_data_path}" owner "${service_user}"

    _command="${sm_path}/pkg/versions/postgresql/${package_version}/bin/initdb ${_initdb_flags[*]}"

    if user is root
    then
      if ! su - "${service_user}" -c "${_command}"
      then __sm.log.warn "initdb failed, command:\n${_command}"
      fi
    else
      if ! eval "${_command}"
      then __sm.log.warn "initdb failed, command:\n${_command}"
      fi
    fi
  fi

  if path exists "${service_data_path}/base"
  then
    for _dir in archives wal
    do
      if ! path exists "${service_data_path}/${_dir}"
      then paths create "${service_data_path}/${_dir}"
      fi
    done
  fi

  path chown "$service_user:$service_user" recursively "${service_data_path}"
  path chmod 0700 recursively "${service_data_path}"
}

postgresql_preconfigure()
{
  trace_filter postgresql || set +o xtrace

  if [[ "$action" = *install ]]
  then
    configure_flags=(
      --prefix="${install_base_path}/${package_version}"
      --datadir="${install_base_path}/${package_version}/data"
      --with-openssl
      --enable-shared
    )
    export CFLAGS='-O2'
  fi
}

postgresql_uninstall()
{
  trace_filter postgresql || set +o xtrace
  local _file

  paths remove "${prefix_path}/${package_name}" \
    "${prefix_path}/${package_name}-${package_version}"

  for _file in "/etc/profile.d/postgresql.sh" \
    "${init_scripts_path}/postgresql" \
    "/etc/monit.d/postgresql" \
    "/lib/systemd/system/postgresql.service"
  do
    if _file exists "$_file"
    then
      file remove "$_file"
    fi
  done

  user delete "${package_user}"

  log "Removal of ${package_name} complete."
}

postgresql_configure_shm()
{
  os is linux || return 0

  # Full memory requirement calculations:
  # typeset max_locks_per_transaction max_connections autovacuum_max_workers \
  #   max_prepared_transactions block_size wal_block_size wal_buffers

  # Defaults:
  #   max_locks_per_transaction=64
  #   max_connections=100
  #   autovacuum_max_workers=3
  #   max_prepared_transactions=0
  #   block_size=8192
  #   wal_block_size=8192
  #   wal_buffers=8

  # Formulas:
  # connections=$(expr (1800 + 270 \* ${max_locks_per_transaction}) \* (${max_connections} + ${autovacuum_max_workers}))
  # prepared_transactions=$(expr	(770 + 270 \* ${max_locks_per_transaction}) \* ${max_prepared_transactions})
  # shared_disk_buffers=$(expr	(${block_size} + 208) \* ${shared_buffers})
  # total_wal_buffers=$(expr	(${wal_block_size} + 8) \* ${wal_buffers})
  # fixed_space_requirements=770 # kB

  command exists getconf || return 0

  typeset page_size physical_pages shmmax shmall
  page_size=$(getconf PAGE_SIZE)
  physical_pages=$(getconf _PHYS_PAGES)
  shmall=$(expr ${physical_pages} / 2)
  shmmax=$(expr ${shmall} \* ${page_size})
  if ! file contains string 'kernel.shmmax' /etc/sysctl.conf
  then file write append string "kernel.shmmax = ${shmmax}\n" to /etc/sysctl.conf
  fi
  if ! file contains string 'kernel.shmall' /etc/sysctl.conf
  then file write append string "kernel.shmall = ${shmall}\n" to /etc/sysctl.conf
  fi
  sysctl -w kernel.shmmax="${shmmax}"
  sysctl -w kernel.shmall="${shmall}"
}
